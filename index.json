[{"date":"1682025240", "url":"https://dev.opsblog.de/2023/04/20/curl_nextcloud/", "title":"curl: einfacher Datei-Upload nach Nextcloud", "summary":"Hier ein kurzer Befehl um mit curl einen Datei-Upload an Nextcloud zu ermöglichen:\ncurl -T ./test.txt -u \u0026#39;USER:PASSWD\u0026#39; \u0026#34;https://nc.domain.de/nextcloud/remote.php/dav/files/USER/test.txt\u0026#34; Da Nextcloud über WebDav angesprochen werden kann und curl über den Schalter -T (--upload-file) ein Datei-Upload macht, kann man dies gut dazu verwenden um eben Dateien an Nextcloud zu senden.\nMan braucht dafür nur die Adresse der Nextcloud-Instanz, welche man nutzen will und spricht dann mit curl den Teil remote.php/dav/files/USER der URL an.\nIn diesem Beispiel wird die Datei text.txt aus dem aktuellen Verzeichnis in das root-Verzeichnis des Nextcloud-Benutzers USER unter verwendung des Benutzernamen USER und dem Passwort PASSWD hoch geladen.\n", "content":"Hier ein kurzer Befehl um mit curl einen Datei-Upload an Nextcloud zu ermöglichen:\ncurl -T ./test.txt -u \u0026#39;USER:PASSWD\u0026#39; \u0026#34;https://nc.domain.de/nextcloud/remote.php/dav/files/USER/test.txt\u0026#34; Da Nextcloud über WebDav angesprochen werden kann und curl über den Schalter -T (--upload-file) ein Datei-Upload macht, kann man dies gut dazu verwenden um eben Dateien an Nextcloud zu senden.\nMan braucht dafür nur die Adresse der Nextcloud-Instanz, welche man nutzen will und spricht dann mit curl den Teil remote.php/dav/files/USER der URL an.\nIn diesem Beispiel wird die Datei text.txt aus dem aktuellen Verzeichnis in das root-Verzeichnis des Nextcloud-Benutzers USER unter verwendung des Benutzernamen USER und dem Passwort PASSWD hoch geladen.\n","tags":["Sonstiges","Linux","Windows"], "section": "post"},{"date":"1682024400", "url":"https://dev.opsblog.de/2023/04/20/powershell_transcript/", "title":"Powershell: Script-Ausgaben loggen", "summary":"Manchmal möchte man die Konsolen-Ausgabe des Scriptes gern weiterverarbeiten und z.b. als Log in eine Logdatei Schreiben.\nMan könnte dazu jetzt z.B. jede Log-Ausgabe einzeln über eine Pipe in eine Text-Datei Schreiben - muss man aber nicht.\nEine einfachere Methode ist es das cmdlet \u0026ldquo;Start-Transcript\u0026rdquo; hierfür zu nutzen.\nHier ein Beispiel:\nStart-Transcript -Path \u0026#34;.\\log.txt\u0026#34; -UseMinimalHeader Write-Output \u0026#34;Hallo Welt!\u0026#34; Get-Date Stop-Transcript In diesem Beispiel wird die Ausgabe des Write-Output und des Get-Date in die Text-Datei log.txt geschrieben.\nDer Inhalt der log.txt würde dann wie folgt aussehen:\n**********************\rPowerShell transcript start\rStart time: 20230420210255\r**********************\rTranscript started, output file is .\\log.txt\rHallo Welt!\rDonnerstag, 20. April 2023 21:02:55\r**********************\rPowerShell transcript end\rEnd time: 20230420210255\r********************** Wetere Informationen zu Start-Transcript gibt es dort: Start-Transcript auf learn.microsoft.com\n", "content":"Manchmal möchte man die Konsolen-Ausgabe des Scriptes gern weiterverarbeiten und z.b. als Log in eine Logdatei Schreiben.\nMan könnte dazu jetzt z.B. jede Log-Ausgabe einzeln über eine Pipe in eine Text-Datei Schreiben - muss man aber nicht.\nEine einfachere Methode ist es das cmdlet \u0026ldquo;Start-Transcript\u0026rdquo; hierfür zu nutzen.\nHier ein Beispiel:\nStart-Transcript -Path \u0026#34;.\\log.txt\u0026#34; -UseMinimalHeader Write-Output \u0026#34;Hallo Welt!\u0026#34; Get-Date Stop-Transcript In diesem Beispiel wird die Ausgabe des Write-Output und des Get-Date in die Text-Datei log.txt geschrieben.\nDer Inhalt der log.txt würde dann wie folgt aussehen:\n**********************\rPowerShell transcript start\rStart time: 20230420210255\r**********************\rTranscript started, output file is .\\log.txt\rHallo Welt!\rDonnerstag, 20. April 2023 21:02:55\r**********************\rPowerShell transcript end\rEnd time: 20230420210255\r********************** Wetere Informationen zu Start-Transcript gibt es dort: Start-Transcript auf learn.microsoft.com\n","tags":["Powershell"], "section": "post"},{"date":"1682020800", "url":"https://dev.opsblog.de/2023/04/20/docker_powershell/", "title":"Powershell unter Linux in Docker-Container ausführen", "summary":"Hier ein kurzer Befehl um ein Powershell-Script mit Docker unter Linux auszuführen:\ndocker run --rm --name PowerShell -v /home/sven/ps:/home/ps mcr.microsoft.com/powershell:lts-7.2-alpine-3.14 pwsh /home/ps/MyPowerShellScript.ps1 In diesem Fall wird ein Docker-Container mit dem Image mcr.microsoft.com/powershell:lts-7.2-alpine-3.14 gestartet in dem sich eine Powershell 7.2 befindet und das Script MyPowerShellScript.ps1 aus dem Host-Pfad /home/sven/ps gestartet, welcher im Conatiner als /home/ps gemountet wurde.\nDer Container wird nach dem Ausführen wieder gelöscht (--rm) und existiert nur solange das Script aufgerufen wird.\n", "content":"Hier ein kurzer Befehl um ein Powershell-Script mit Docker unter Linux auszuführen:\ndocker run --rm --name PowerShell -v /home/sven/ps:/home/ps mcr.microsoft.com/powershell:lts-7.2-alpine-3.14 pwsh /home/ps/MyPowerShellScript.ps1 In diesem Fall wird ein Docker-Container mit dem Image mcr.microsoft.com/powershell:lts-7.2-alpine-3.14 gestartet in dem sich eine Powershell 7.2 befindet und das Script MyPowerShellScript.ps1 aus dem Host-Pfad /home/sven/ps gestartet, welcher im Conatiner als /home/ps gemountet wurde.\nDer Container wird nach dem Ausführen wieder gelöscht (--rm) und existiert nur solange das Script aufgerufen wird.\n","tags":["Linux","Docker","Powershell"], "section": "post"}]